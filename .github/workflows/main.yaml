name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Ensure ECR repository exists
        run: |
          echo "Checking if repository exists..."
          if ! aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY_NAME }} 2>/dev/null; then
            echo "Repository doesn't exist, creating..."
            aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY_NAME }}
            echo "Repository created successfully"
          else
            echo "Repository already exists"
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing Docker image..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Verify image was pushed
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          echo "Verifying image exists in ECR..."
          aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG

  Continuous-Deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install AWS CLI on self-hosted runner
        run: |
          # Check if AWS CLI is already installed
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            sudo apt-get update
            sudo apt-get install -y unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          else
            echo "AWS CLI already installed"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify ECR repository exists
        run: |
          echo "Verifying ECR repository exists..."
          aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY_NAME }}
          echo "Repository verified successfully"

      - name: Docker login to ECR
        run: |
          echo "Logging into ECR..."
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_LOGIN_URI }}

      - name: Verify image exists in ECR
        run: |
          echo "Checking if image exists in ECR..."
          aws ecr describe-images --repository-name ${{ secrets.ECR_REPOSITORY_NAME }} --image-ids imageTag=latest

      - name: Pull latest image from ECR
        run: |
          echo "Pulling latest image from ECR..."
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Stop and remove existing container
        run: |
          echo "Stopping and removing existing container..."
          docker stop mltest 2>/dev/null || true
          docker rm mltest 2>/dev/null || true

      - name: Run Docker Image to serve users
        run: |
          echo "Starting new container..."
          docker run -d -p 8080:8080 --ipc="host" --name=mltest \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Verify container is running
        run: |
          echo "Verifying container is running..."
          docker ps | grep mltest
          echo "Container started successfully"

      - name: Clean previous images and containers
        run: |
          echo "Cleaning up old images and containers..."
          docker system prune -f