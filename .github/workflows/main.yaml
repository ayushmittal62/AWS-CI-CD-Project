name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
          
  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check disk space before cleanup
        run: |
          echo "Disk usage before cleanup:"
          df -h
          echo "Docker disk usage:"
          docker system df

      - name: Aggressive Docker cleanup
        run: |
          echo "Stopping and removing all containers..."
          docker stop $(docker ps -aq) 2>/dev/null || true
          docker rm $(docker ps -aq) 2>/dev/null || true
          
          echo "Removing all unused images, networks, and build cache..."
          docker system prune -af --volumes
          
          echo "Removing all images (keeping only running containers)..."
          docker image prune -af
          
          echo "Additional cleanup of dangling images..."
          docker rmi $(docker images -f "dangling=true" -q) 2>/dev/null || true
          
          echo "Clean pip cache..."
          rm -rf ~/.cache/pip/* 2>/dev/null || true
          
          echo "Clean apt cache..."
          sudo apt-get clean 2>/dev/null || true
          
          echo "Clean temp files..."
          sudo rm -rf /tmp/* 2>/dev/null || true

      - name: Check disk space after cleanup
        run: |
          echo "Disk usage after cleanup:"
          df -h
          echo "Available space in root:"
          df -h / | awk 'NR==2{printf "Available: %s (Used: %s)\n", $4, $5}'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Stop and remove existing mltest container
        run: |
          if docker ps -q --filter "name=mltest" | grep -q .; then
            echo "Stopping existing mltest container..."
            docker stop mltest
            docker rm -f mltest
          else
            echo "No existing mltest container found"
          fi
      
      - name: Pull latest images
        run: |
          echo "Pulling latest image..."
          docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
         
      - name: Run Docker Image to serve users
        run: |
          echo "Starting new mltest container..."
          docker run -d -p 8080:8080 --ipc="host" --name=mltest \
            -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
            ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Verify container is running
        run: |
          echo "Checking container status..."
          docker ps --filter "name=mltest"
          
      - name: Final cleanup of unused resources
        run: |
          echo "Final cleanup of unused images and containers..."
          docker system prune -f
          