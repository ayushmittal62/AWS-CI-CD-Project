name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Free up disk space on GitHub runner
        run: |
          echo "=== Initial disk usage ==="
          df -h
          echo "=== Freeing up space on GitHub runner ==="
          
          # Remove unnecessary software to free up space
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/graalvm/
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          
          # Clean package caches
          sudo apt-get clean
          sudo apt-get autoremove -y
          
          # Clear tmp directories  
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*
          
          echo "=== Disk usage after cleanup ==="
          df -h

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
          # Disable pip caching to save space
          PIP_NO_CACHE_DIR: 1
        run: |
          echo "=== Pre-build disk space check ==="
          df -h
          
          # Build a docker container with space-efficient options
          echo "Building Docker image..."
          docker build --no-cache --compress -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          echo "=== Post-build disk space check ==="
          df -h
          
          # Clean up build cache before push
          docker builder prune -f
          
          # Push to ECR
          echo "Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
          echo "=== Final disk space check ==="
          df -h
          
          
  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Free up disk space immediately
        run: |
          echo "=== EMERGENCY DISK CLEANUP ==="
          # Check current space
          AVAILABLE_KB=$(df / | awk 'NR==2 {print $4}')
          AVAILABLE_GB=$((AVAILABLE_KB / 1024 / 1024))
          echo "Current available space: ${AVAILABLE_GB}GB"
          
          # Stop Docker daemon first for complete cleanup
          echo "Stopping Docker daemon..."
          sudo systemctl stop docker || true
          
          # Remove all Docker data completely
          echo "Removing all Docker data..."
          sudo rm -rf /var/lib/docker/* 2>/dev/null || true
          
          # Clean system directories aggressively
          echo "Cleaning system directories..."
          sudo rm -rf /tmp/* 2>/dev/null || true
          sudo rm -rf /var/tmp/* 2>/dev/null || true
          sudo rm -rf ~/.cache/* 2>/dev/null || true
          
          # Clean package manager caches
          echo "Cleaning package caches..."
          sudo apt-get clean 2>/dev/null || true
          sudo apt-get autoremove -y 2>/dev/null || true
          
          # Restart Docker
          echo "Restarting Docker daemon..."
          sudo systemctl start docker
          sleep 10
          
          # Show final space
          echo "=== SPACE AFTER CLEANUP ==="
          df -h /

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Stop and remove existing container
        run: |
          if docker ps -q --filter "name=mltest" | grep -q .; then
            echo "Stopping existing mltest container..."
            docker stop mltest
            docker rm -f mltest
          else
            echo "No existing mltest container found"
          fi
      
      - name: Pull latest images
        run: |
          echo "=== Pre-pull space check ==="
          df -h /
          echo "Pulling latest image..."
          docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
          echo "=== Post-pull space check ==="
          df -h /
         
      # - name: Stop and remove  container if running
      #   run: |
      #    docker ps -q --filter "name=mltest" | grep -q . && docker stop mltest && docker rm -fv mltest
       
      - name: Run Docker Image to serve users
        run: |
          echo "Starting new mltest container..."
          docker run -d -p 8080:8080 --ipc="host" --name=mltest \
            -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
            ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Clean previous images and containers
        run: |
          echo "Final cleanup of unused images and containers..."
          docker system prune -f

          
          